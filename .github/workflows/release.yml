name: release

on:
  pull_request:
    paths:
      - ".github/workflows/release.yml"
      - "rust-toolchain.toml"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - "**.rs"

  push:
    branches:
      - main
    paths:
      - ".github/workflows/release.yml"
      - "rust-toolchain.toml"
      - "**/Cargo.toml"
      - "**/Cargo.lock"
      - "**.rs"

  workflow_call:
    inputs:
      release_tag:
        description: "version of the release"
        required: true
        type: string

  workflow_dispatch:
    inputs:
      release_tag:
        description: "version of the release"
        required: true
        type: string

jobs:
  build-windows-binaries:
    name: build windows binaries
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: aarch64-pc-windows-msvc
      - name: build binary for amd64
        run: cargo build --release --target x86_64-pc-windows-msvc
      - name: rename binary for amd64
        run: mv target/x86_64-pc-windows-msvc/release/git-metrics.exe ./git-metrics_win-x86_64.exe
      - name: build binary for arm64
        run: cargo build --release --target aarch64-pc-windows-msvc
      - name: rename binary for arm64
        run: mv target/aarch64-pc-windows-msvc/release/git-metrics.exe ./git-metrics_win-aarch64.exe
      - run: stat --printf="%s" ./git-metrics_win-x86_64.exe
      - name: set git user
        uses: ./.github/actions/git-user

      - name: add metrics
        run: |
          ./git-metrics_win-x86_64.exe --backend command pull
          ./git-metrics_win-x86_64.exe add binary-size --tag "build.target: x86_64-pc-windows-msvc" --tag "platform.os: windows" --tag "platform.arch: x86_64" --tag "unit: byte" $(stat --printf="%s" ./git-metrics_win-x86_64.exe)
          ./git-metrics_win-x86_64.exe add binary-size --tag "build.target: aarch64-pc-windows-msvc" --tag "platform.os: windows" --tag "platform.arch: aarch64" --tag "unit: byte" $(stat --printf="%s" ./git-metrics_win-aarch64.exe)
          ./git-metrics_win-x86_64.exe --backend command -vvvvv push

      - uses: actions/upload-artifact@v4
        with:
          name: binary-windows
          path: git-metrics_win-*
          if-no-files-found: error

  build-macos-binaries:
    name: build macos binaries
    runs-on: macos-latest
    # needs:
    #   - build-windows-binaries
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: aarch64-apple-darwin

      - name: build binary for amd64
        run: |
          cargo build --release
          strip target/release/git-metrics
      - run: mv ./target/release/git-metrics ./git-metrics_darwin-x86_64
      - name: build binary for arm64
        run: |
          cargo build --release --target aarch64-apple-darwin
          strip target/aarch64-apple-darwin/release/git-metrics
      - run: mv ./target/aarch64-apple-darwin/release/git-metrics ./git-metrics_darwin-aarch64
      - name: set git user
        uses: ./.github/actions/git-user

      - name: add metrics
        run: |
          ./git-metrics_darwin-x86_64 --backend command pull
          ./git-metrics_darwin-x86_64 add binary-size \
              --tag "build.target: x86_64-apple-darwin" \
              --tag "platform.os: macos" \
              --tag "platform.arch: x86_64" \
              --tag "unit: byte" \
              $(stat -f '%z' ./git-metrics_darwin-x86_64)
          ./git-metrics_darwin-x86_64 add binary-size \
              --tag "build.target: aarch64-apple-darwin" \
              --tag "platform.os: macos" \
              --tag "platform.arch: aarch64" \
              --tag "unit: byte" \
              $(stat -f '%z' ./git-metrics_darwin-aarch64)
          ./git-metrics_darwin-x86_64 --backend command push

      - uses: actions/upload-artifact@v4
        with:
          name: binary-darwin
          path: git-metrics_darwin-*
          if-no-files-found: error

  build-linux-binaries:
    name: build linux binaries
    runs-on: ubuntu-latest
    # needs:
    #   - build-macos-binaries
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: set up qemu
        uses: docker/setup-qemu-action@v3
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v3
      - name: build binaries using buildx
        uses: docker/build-push-action@v5
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=local,dest=${{ github.workspace }}
          platforms: linux/amd64,linux/arm64
          push: false
          target: binary
      - name: move binaries
        run: |
          mv ./linux_amd64/git-metrics ./git-metrics_linux-x86_64
          mv ./linux_arm64/git-metrics ./git-metrics_linux-aarch64

      - name: set git user
        uses: ./.github/actions/git-user

      - name: make binary executable
        run: chmod +x ./git-metrics_linux-x86_64

      - name: add metrics
        run: |
          ./git-metrics_linux-x86_64 --backend command pull
          ./git-metrics_linux-x86_64 add binary-size \
              --tag "build.target: x86_64-unknown-linux-gnu" \
              --tag "platform.os: linux" \
              --tag "platform.arch: x86_64" \
              --tag "unit: byte" \
              $(stat --printf="%s" ./git-metrics_linux-x86_64)
          ./git-metrics_linux-x86_64 add binary-size \
              --tag "build.target: aarch64-unknown-linux-gnu" \
              --tag "platform.os: linux" \
              --tag "platform.arch: aarch64" \
              --tag "unit: byte" \
              $(stat --printf="%s" ./git-metrics_linux-aarch64)
          ./git-metrics_linux-x86_64 --backend command push

      - uses: actions/upload-artifact@v4
        with:
          name: binary-linux
          path: ./git-metrics_linux-*
          if-no-files-found: error

  comment-metrics:
    name: comment metrics on pull request
    runs-on: ubuntu-latest
    if: ${{ github.ref != 'refs/heads/main' && github.event_name == 'pull_request' }}
    needs:
      - build-windows-binaries
      - build-macos-binaries
      - build-linux-binaries
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: binary-linux
      - name: set git user
        uses: ./.github/actions/git-user
      - name: make git-metrics executable
        run: chmod +x ./git-metrics_linux-x86_64
      - name: pull git-metrics
        run: ./git-metrics_linux-x86_64 --backend command pull
      - name: output git-metrics
        id: diff
        run: metrics=$(./git-metrics_linux-x86_64 --backend command -vvvv diff main..HEAD) >> "$GITHUB_OUTPUT"
      - name: commenting pull request
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            ðŸ¦€ This is how your metrics evolved

            ```
            ${{ steps.diff.outputs.metrics }}
            ```

  publish:
    name: publish
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' }}
    needs:
      - build-windows-binaries
      - build-macos-binaries
      - build-linux-binaries
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: binary-windows
      - uses: actions/download-artifact@v4
        with:
          name: binary-darwin
      - uses: actions/download-artifact@v4
        with:
          name: binary-linux
      - name: get release id from tag
        id: release_id
        run: |
          release_id=$(curl -L -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/tags/${{ inputs.release_tag }} | jq .id)
          echo "release_id=$release_id" >> $GITHUB_OUTPUT
      - name: upload the artifacts
        uses: skx/github-action-publish-binaries@release-2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ steps.release_id.outputs.release_id }}
          args: "git-metrics_*"
